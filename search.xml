<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Nginx支持WebSocket]]></title>
    <url>%2F2019%2F08%2F06%2FNginx%E9%8F%80%EE%88%9B%E5%AF%94WebSocket%2F</url>
    <content type="text"><![CDATA[参考：散尽浮华 错误：Unexpected response code: 400WebSocket是目前比较成熟的技术了，WebSocket协议为创建客户端和服务器端需要实时双向通讯的webapp提供了一个选择。其为HTML5的一部分，WebSocket相较于原来开发这类app的方法来说，其能使开发更加地简单。大部分现在的浏览器都支持WebSocket，比如Firefox，IE，Chrome，Safari，Opera，并且越来越多的服务器框架现在也同样支持WebSocket。 在实际的生产环境中，要求多个WebSocket服务器必须具有高性能和高可用，那么WebSocket协议就需要一个负载均衡层，NGINX从1.3版本开始支持WebSocket，其可以作为一个反向代理和为WebSocket程序做负载均衡。 WebSocket协议与HTTP协议不同，但WebSocket握手与HTTP兼容，使用HTTP升级工具将连接从HTTP升级到WebSocket。这允许WebSocket应用程序更容易地适应现有的基础架构。例如，WebSocket应用程序可以使用标准HTTP端口80和443，从而允许使用现有的防火墙规则。 WebSocket应用程序可以在客户端和服务器之间保持长时间运行的连接，从而有助于开发实时应用程序。用于将连接从HTTP升级到WebSocket的HTTP升级机制使用Upgrade和Connection头。反向代理服务器在支持WebSocket时面临一些挑战。一个是WebSocket是一个逐跳协议，因此当代理服务器拦截客户端的升级请求时，需要向后端服务器发送自己的升级请求，包括相应的头文件。此外，由于WebSocket连接长期存在，与HTTP使用的典型短期连接相反，反向代理需要允许这些连接保持打开状态，而不是关闭它们，因为它们似乎处于空闲状态。 允许在客户机和后端服务器之间建立隧道，NGINX支持WebSocket。对于NGINX将升级请求从客户端发送到后台服务器，必须明确设置Upgrade和Connection标题。 Nginx开启websocket代理功能的配置如下：1）编辑nginx.conf，在http区域内一定要添加下面配置：1234map $http_upgrade $connection_upgrade &#123; default upgrade; &apos;&apos; close;&#125; map指令的作用：该作用主要是根据客户端请求中$http_upgrade 的值，来构造改变$connection_upgrade的值，即根据变量$http_upgrade的值创建新的变量$connection_upgrade，创建的规则就是{}里面的东西。其中的规则没有做匹配，因此使用默认的，即 $connection_upgrade 的值会一直是 upgrade。然后如果 $http_upgrade为空字符串的话，那值会是 close。 2）编辑vhosts下虚拟主机的配置文件，在location匹配配置中添加如下内容：123proxy_http_version 1.1;proxy_set_header Upgrade $http_upgrade;proxy_set_header Connection &quot;Upgrade&quot;; 示例如下：1234567location / &#123; proxy_pass http://127.0.0.1:8080; proxy_set_header Host $host:$server_port; # proxy_http_version 1.1; # 表明使用http版本为1.1,支持websocket proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; &#125;]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS MySQL自动备份shell脚本]]></title>
    <url>%2F2019%2F08%2F02%2FCentOS-MySQL%E9%91%B7%EE%81%84%E5%A7%A9%E6%BE%B6%E5%9B%A6%E5%94%A4shell%E9%91%B4%E6%B0%AD%E6%B9%B0%2F</url>
    <content type="text"><![CDATA[转自：安love 在数据库的日常维护工作中，除了保证业务的正常运行以外，就是要对数据库进行备份，以免造成数据库的丢失，从而给企业带来重大经济损失。通常备份可以按照备份时数据库状态分为热备和冷备，按照备份数据库文件的大小分为增量备份、差异备份和全量备份。这里，我们讲解一种全量备份的方法，来实现定时备份数据到mysql脚本文件，并且支持过期删除。 1、新建shell脚本 mysqlBackup.sh 2、修改shell脚本属性，赋予执行权12chmod 600 /opt/mysqlBackup.shchmod +x /opt/mysqlBackup.sh 3、定时执行脚本1vi /etc/crontab 添加100 03 * * * root /root/mysqlBackup.sh 分 时 1vi /var/spool/mail/root #可查看脚本执行日志 4、MySQL恢复1mysql -u username -p databse &lt; backup.sql 用户名 数据库名 备份sql]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>backup</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Liunx下的日志切割工具-logrotate]]></title>
    <url>%2F2019%2F02%2F11%2FLiunx%E6%B6%93%E5%AC%AC%E6%AE%91%E9%8F%83%E3%83%A5%E7%B9%94%E9%8D%92%E5%9B%A7%E5%A3%8A%E5%AE%B8%E3%83%A5%E5%8F%BF-logrotate%2F</url>
    <content type="text"><![CDATA[logrotate介绍logrotate是个十分有用的工具，它可以自动对日志进行截断（或轮循）、压缩以及删除旧的日志文件。例如，你可以设置logrotate，让/var/log/foo日志文件每30天轮循，并删除超过6个月的日志。配置完后，logrotate的运作完全自动化，不必进行任何进一步的人为干预。另外，旧日志也可以通过电子邮件发送，不过该选项超出了本教程的讨论范围。 logrotate安装主流Linux发行版上都默认安装有logrotate包，如果出于某种原因，logrotate没有出现在里头，你可以使用apt-get或yum命令来安装。在Debian或Ubuntu上：1$ apt-get install logrotate cron 在Fedora，CentOS或RHEL上：1$ yum install logrotate crontabs logrotate的配置文件是/etc/logrotate.conf，通常不需要对它进行修改。日志文件的轮循设置在独立的配置文件中，它（们）放在/etc/logrotate.d/目录下。 配置文件 /etc/logrotate.conf /etc/logrotate.d/ /etc/logrotate.conf会包含/etc/logrotate.d/目录下的配置文件由于logratate已经加到cron.daily（/etc/cron.daily/logrotate），不再需要加到计划任务中 常用命令 logrotate /etc/logrotate.conf 用配置文件的话，不能马上有效，直接使用命令马上可以生效；要调用为/etc/lograte.d/下配置的所有日志调用logrotate。 logrotate -f /etc/logrotate.conf 强制执行 /usr/sbin/logrotate -f /etc/logrotate.d/nginx 立即执行logratate；要为某个特定的配置调用logrotate。 常用配置compress：对轮询出来的日志文件进行压缩，默认我gzipnocompress：对轮询出来的日志文件不进行压缩compresscmd：指定使用什么方式进行压缩，默认为gzip。指定的格式为：compresscmd /usr/bin/bzip2compressext： 指定压缩文件的后缀，如：compressext.bz2，默认随压缩方式的uncompresscmd：解压方式，默认为gunzipcopy：日志轮询的时候，对原日志文件进行copy，不改变原文件，相当于对原文件进行了一个快照，此选项使用的时候，create不生效nocopy：对原日志文件不进行拷贝，此选项会覆盖copy选项create mode owner group, create owner group：日志轮询后会创建一个新的原来名字的文件，可以设置权限和所属者或者所属组，如create 755 root lilenocreate：轮询后不创建，也就是把要轮询的日志轮询后不会产生一个原来名字的文件，此选项会覆盖createolddir directory：指定轮询出来的日志文件存放的目录noolddir：轮询出来的日志文件放在与原日志文件一样的目录，此选项会覆盖olddircreateolddir mode owner group：当指定轮询日志存放路径的时候，若路径不存在，则创建nocreateolddir： 当指定轮询日志存放路径的时候，若路径不存在，不创建，此选项会覆盖createolddirhourly： 日志每小时做一次轮询daily： 日志每天做一次轮询weekly： 日志每个星期做一次轮询monthly：日志每月做一次轮询yearly：日志每年做一次轮询dateext：轮询出的日志名字后加上日期nodateext： 轮询出的日志名字不使用日期的方式，此选项会覆盖dateextdateformat format_string：日期的格式dateyesterday：今天做的轮询的话，文件名的日期写昨天的delaycompress：新的轮询日志不会马上压缩，等到下一个新的轮询日志出现的时候才做压缩，要与compress参数一起使用nodelaycompress：不会延期压缩，轮询日志后会马上进行压缩，要与compress参数一起使用；此选项会覆盖delaycompress选项ifempty：即使日志文件为空，也要做轮询，默认为ifemptynotifempty：日志文件为空的话，不做轮询，会覆盖ifempty参missingok：如果要做日志轮询的日志文件不存在，那么忽略，接着做其他的nomissingok：如果要做日志轮询的日志文件不存在，那么不会继续执行后面的，而会返回错误，默认为nomissingmaxage count：删除指定count天前的日志，如果配置了mail的话，删除的日志将会发送到指定的邮箱start count：如果不使用dateext，轮询出的日志文件不会使用日期作为后缀，而会使用数字，star count 可以设置这个数字的开始至，如：start 9，那么就会以9开始，如log_file.9rotate count：轮询文件的个数，当个数满了之后，会删除最老的size size：只有当原日志文件的大小达到指定的size时，才做轮询，单位自定义postrotate/endscript：在日志被轮转后执行prerotate/endscript：在日志被轮转前并且有需要轮转才执行sharedscripts：当匹配文件夹里时，时间久后，会有很多以原文件加日期命名的轮询日志，而我只需要最匹配最原始的文件做轮询，这个选项就是为了做这个设置；如果没有的话，被轮询出来的日志再下一次轮询时也会被匹配到也做轮询 常用实例 tomcat日志切割1vim /etc/logrotate.d/tomcat 123456789/usr/apache-tomcat-8.5.35/logs/catalina.out &#123;copytruncatedailyrotate 10missingokdateextcompressnotifempty&#125; nginx访问日志每天做日志分割1vim /etc/logrotate.d/nginx 123456789101112/var/log/nginx/*log &#123; create 0644 nginx nginx daily rotate 10 missingok notifempty compress sharedscripts postrotate /bin/kill -USR1 `cat /usr/local/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true endscript&#125; 参考：https://www.cnblogs.com/lemon-le/p/8476648.htmlhttps://linux.cn/article-4126-1.html]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>logrotate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UFW firewall simple setup]]></title>
    <url>%2F2019%2F02%2F03%2FUFW-firewall-simple-setup%2F</url>
    <content type="text"><![CDATA[ufw是一个主机端的iptables类防火墙配置工具，比较容易上手。一般桌面应用使用ufw已经可以满足要求了。 安装方法1$ sudo apt-get install ufw 使用方法1 启用12sudo ufw enablesudo ufw default deny 作用：开启了防火墙并随系统启动同时关闭所有外部对本机的访问（本机访问外部正常）。 2 关闭1sudo ufw disable 2 查看防火墙状态1sudo ufw status 3 开启/禁用相应端口或服务举例1sudo ufw allow 80 允许外部访问80端口1sudo ufw delete allow 80 禁止外部访问80 端口1sudo ufw allow from 192.168.1.1 允许此IP访问所有的本机端口1sudo ufw deny smtp 禁止外部访问smtp服务1sudo ufw delete allow smtp 删除上面建立的某条规则1sudo ufw deny proto tcp from 10.0.0.0/8 to 192.168.0.1 port 22 要拒绝所有的TCP流量从10.0.0.0/8 到192.168.0.1地址的22端口 可以允许所有RFC1918网络（局域网/无线局域网的）访问这个主机（/8,/16,/12是一种网络分级）：123sudo ufw allow from 10.0.0.0/8sudo ufw allow from 172.16.0.0/12sudo ufw allow from 192.168.0.0/16 推荐设置123sudo apt-get install ufwsudo ufw enablesudo ufw default deny 这样设置已经很安全，如果有特殊需要，可以使用sudo ufw allow开启相应服务。12sudo ufw allow 80/tcpufw delete allow 80/tcp 详细使用说明More info: Ufw中文使用指南]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ufw</tag>
        <tag>防火墙</tag>
        <tag>firewall</tag>
      </tags>
  </entry>
</search>
