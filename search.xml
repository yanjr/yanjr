<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS MySQL自动备份shell脚本</title>
    <url>/2019/08/02/CentOS-MySQL%E9%91%B7%EE%81%84%E5%A7%A9%E6%BE%B6%E5%9B%A6%E5%94%A4shell%E9%91%B4%E6%B0%AD%E6%B9%B0/</url>
    <content><![CDATA[<p>转自：<a href="https://www.cnblogs.com/zzablog/p/9487912.html">安love</a></p>
<p><img src="https://wx4.sinaimg.cn/mw690/006T7jotly1g5kgqqq9g9j30u00u00wt.jpg" alt="美女"></p>
<p>在数据库的日常维护工作中，除了保证业务的正常运行以外，就是要对数据库进行备份，以免造成数据库的丢失，从而给企业带来重大经济损失。<br>通常备份可以按照备份时数据库状态分为热备和冷备，按照备份数据库文件的大小分为增量备份、差异备份和全量备份。<br>这里，我们讲解一种全量备份的方法，来实现定时备份数据到mysql脚本文件，并且支持过期删除。</p>
<p>1、新建shell脚本</p>
<p><a href="https://ajax.yanjr.cn/mysqlBackup.sh">mysqlBackup.sh</a></p>
<p>2、修改shell脚本属性，赋予执行权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 /opt/mysqlBackup.sh</span><br><span class="line"><span class="built_in">chmod</span> +x /opt/mysqlBackup.sh</span><br></pre></td></tr></table></figure>
<p>3、定时执行脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/crontab</span><br></pre></td></tr></table></figure>
<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">00 03 * * * root /root/mysqlBackup.sh</span><br></pre></td></tr></table></figure>
<p>分 时</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /var/spool/mail/root <span class="comment">#可查看脚本执行日志</span></span><br></pre></td></tr></table></figure>
<p>4、MySQL恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u username -p databse &lt; backup.sql</span><br></pre></td></tr></table></figure>

<pre><code>           用户名           数据库名    备份sql
</code></pre>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>backup</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos集群部署说明</title>
    <url>/2020/06/12/Nacos-cluters-deployment-instructions/</url>
    <content><![CDATA[<p>Nacos集群部署说明</p>
<h2 id="集群部署架构图"><a href="#集群部署架构图" class="headerlink" title="集群部署架构图"></a>集群部署架构图</h2><p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p>
<p><a href="http://ip1:port/openAPI">http://ip1:port/openAPI</a> 直连ip模式，机器挂则需要修改ip才可以使用。</p>
<p><a href="http://VIP:port/openAPI">http://VIP:port/openAPI</a> 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</p>
<p><a href="http://nacos.com:port/openAPI">http://nacos.com:port/openAPI</a> 域名 + VIP模式&#x2F;Nginx，可读性好，而且换ip方便，推荐模式。</p>
<p><img src="https://ajax.yanjr.cn/1561258986171-4ddec33c-a632-4ec3-bfff-7ef4ffc33fb9.jpeg" alt="nacos-clusters" title="nacos clusters"></p>
<h2 id="1-预备环境准备"><a href="#1-预备环境准备" class="headerlink" title="1. 预备环境准备"></a>1. 预备环境准备</h2><p>安装环境：</p>
<ol>
<li>64 bit Contos7;</li>
<li>64 bit JDK 1.8+；</li>
<li>3个或3个以上Nacos节点才能构成集群；</li>
<li>mysql5.7</li>
<li>nginx</li>
</ol>
<h2 id="2-下载安装包"><a href="#2-下载安装包" class="headerlink" title="2. 下载安装包"></a>2. 下载安装包</h2><p>More info: <a href="https://github.com/alibaba/nacos/releases">download</a></p>
<h2 id="3-配置集群配置文件"><a href="#3-配置集群配置文件" class="headerlink" title="3. 配置集群配置文件"></a>3. 配置集群配置文件</h2><p>在nacos的解压目录nacos&#x2F;的conf目录下，有配置文件cluster.conf，请每行配置成ip:port。（请配置3个或3个以上节点）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip:port</span></span><br><span class="line">200.8.9.16:8848</span><br><span class="line">200.8.9.17:8848</span><br><span class="line">200.8.9.18:8848</span><br></pre></td></tr></table></figure>

<h2 id="4-确定数据源"><a href="#4-确定数据源" class="headerlink" title="4. 确定数据源"></a>4. 确定数据源</h2><h3 id="使用内置数据源"><a href="#使用内置数据源" class="headerlink" title="使用内置数据源"></a>使用内置数据源</h3><p>无需进行任何配置</p>
<h3 id="使用外置数据源"><a href="#使用外置数据源" class="headerlink" title="使用外置数据源"></a>使用外置数据源</h3><p>生产使用建议至少主备模式，或者采用高可用数据库。</p>
<p>具体的操作步骤：</p>
<ul>
<li>1.安装数据库，版本要求：5.6.5+</li>
<li>2.初始化mysql数据库，数据库初始化文件：nacos&#x2F;conf&#x2F;nacos-mysql.sql</li>
<li>3.修改conf&#x2F;application.properties文件，增加支持mysql数据源配置（目前只支持mysql），添加mysql数据源的url、用户名和密码，添加在文件最后。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring.datasource.platform=mysql</span><br><span class="line"></span><br><span class="line">db.num=1</span><br><span class="line">db.url.0=jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="literal">true</span></span><br><span class="line">db.user=nacos_devtest</span><br><span class="line">db.password=youdontknow</span><br></pre></td></tr></table></figure>



<h2 id="5-启动服务器"><a href="#5-启动服务器" class="headerlink" title="5. 启动服务器"></a>5. 启动服务器</h2><h4 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h4><blockquote>
<p>使用外置数据源</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh startup.sh</span><br></pre></td></tr></table></figure>
<h2 id="6-关闭服务器"><a href="#6-关闭服务器" class="headerlink" title="6. 关闭服务器"></a>6. 关闭服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh shutdown.sh</span><br></pre></td></tr></table></figure>

<h2 id="7-Nginx配置"><a href="#7-Nginx配置" class="headerlink" title="7. Nginx配置"></a>7. Nginx配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream nacoscluster &#123;</span><br><span class="line">        server 200.8.9.16:8848;</span><br><span class="line">        server 200.8.9.17:8848;</span><br><span class="line">        server 200.8.9.18:8848;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name     200.8.9.15;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://nacoscluster;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<p>欢迎评论: <a href="https://weibo.com/3244917372/J6E3kwhzE?from=page_1005053244917372_profile&wvr=6&mod=weibotime&type=comment">weibo</a></p>
]]></content>
      <categories>
        <category>Alibaba-cloud</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Liunx下的日志切割工具-logrotate</title>
    <url>/2019/02/11/Liunx-Log-cutting-tool-logrotate/</url>
    <content><![CDATA[<h3 id="logrotate介绍"><a href="#logrotate介绍" class="headerlink" title="logrotate介绍"></a>logrotate介绍</h3><p>logrotate是个十分有用的工具，它可以自动对日志进行截断（或轮循）、压缩以及删除旧的日志文件。例如，你可以设置logrotate，让&#x2F;var&#x2F;log&#x2F;foo日志文件每30天轮循，并删除超过6个月的日志。配置完后，logrotate的运作完全自动化，不必进行任何进一步的人为干预。另外，旧日志也可以通过电子邮件发送，不过该选项超出了本教程的讨论范围。</p>
<h3 id="logrotate安装"><a href="#logrotate安装" class="headerlink" title="logrotate安装"></a>logrotate安装</h3><p>主流Linux发行版上都默认安装有logrotate包，如果出于某种原因，logrotate没有出现在里头，你可以使用apt-get或yum命令来安装。<br>在Debian或Ubuntu上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-get install logrotate cron</span><br></pre></td></tr></table></figure>
<p>在Fedora，CentOS或RHEL上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install logrotate crontabs</span><br></pre></td></tr></table></figure>
<p>logrotate的配置文件是&#x2F;etc&#x2F;logrotate.conf，通常不需要对它进行修改。日志文件的轮循设置在独立的配置文件中，它（们）放在&#x2F;etc&#x2F;logrotate.d&#x2F;目录下。</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li>&#x2F;etc&#x2F;logrotate.conf </li>
<li>&#x2F;etc&#x2F;logrotate.d&#x2F;</li>
<li>&#x2F;etc&#x2F;logrotate.conf会包含&#x2F;etc&#x2F;logrotate.d&#x2F;目录下的配置文件<br>由于logratate已经加到cron.daily（&#x2F;etc&#x2F;cron.daily&#x2F;logrotate），不再需要加到计划任务中</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>logrotate &#x2F;etc&#x2F;logrotate.conf    用配置文件的话，不能马上有效，直接使用命令马上可以生效；要调用为&#x2F;etc&#x2F;lograte.d&#x2F;下配置的所有日志调用logrotate。</li>
<li>logrotate -f  &#x2F;etc&#x2F;logrotate.conf   强制执行</li>
<li>&#x2F;usr&#x2F;sbin&#x2F;logrotate -f &#x2F;etc&#x2F;logrotate.d&#x2F;nginx  立即执行logratate；要为某个特定的配置调用logrotate。</li>
</ul>
<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><p>compress：对轮询出来的日志文件进行压缩，默认我gzip<br>nocompress：对轮询出来的日志文件不进行压缩<br>compresscmd：指定使用什么方式进行压缩，默认为gzip。指定的格式为：compresscmd &#x2F;usr&#x2F;bin&#x2F;bzip2<br>compressext： 指定压缩文件的后缀，如：compressext.bz2，默认随压缩方式的<br>uncompresscmd：解压方式，默认为gunzip<br>copy：日志轮询的时候，对原日志文件进行copy，不改变原文件，相当于对原文件进行了一个快照，此选项使用的时候，create不生效<br>nocopy：对原日志文件不进行拷贝，此选项会覆盖copy选项<br>create mode owner group, create owner group：日志轮询后会创建一个新的原来名字的文件，可以设置权限和所属者或者所属组，如create 755 root lile<br>nocreate：轮询后不创建，也就是把要轮询的日志轮询后不会产生一个原来名字的文件，此选项会覆盖create<br>olddir directory：指定轮询出来的日志文件存放的目录<br>noolddir：轮询出来的日志文件放在与原日志文件一样的目录，此选项会覆盖olddir<br>createolddir mode owner group：当指定轮询日志存放路径的时候，若路径不存在，则创建<br>nocreateolddir： 当指定轮询日志存放路径的时候，若路径不存在，不创建，此选项会覆盖createolddir<br>hourly：  日志每小时做一次轮询<br>daily：     日志每天做一次轮询<br>weekly： 日志每个星期做一次轮询<br>monthly：日志每月做一次轮询<br>yearly：日志每年做一次轮询<br>dateext：轮询出的日志名字后加上日期<br>nodateext： 轮询出的日志名字不使用日期的方式，此选项会覆盖dateext<br>dateformat format_string：日期的格式<br>dateyesterday：今天做的轮询的话，文件名的日期写昨天的<br>delaycompress：新的轮询日志不会马上压缩，等到下一个新的轮询日志出现的时候才做压缩，要与compress参数一起使用<br>nodelaycompress：不会延期压缩，轮询日志后会马上进行压缩，要与compress参数一起使用；此选项会覆盖delaycompress选项<br>ifempty：即使日志文件为空，也要做轮询，默认为ifempty<br>notifempty：日志文件为空的话，不做轮询，会覆盖ifempty参<br>missingok：如果要做日志轮询的日志文件不存在，那么忽略，接着做其他的<br>nomissingok：如果要做日志轮询的日志文件不存在，那么不会继续执行后面的，而会返回错误，默认为nomissing<br>maxage count：删除指定count天前的日志，如果配置了mail的话，删除的日志将会发送到指定的邮箱<br>start count：如果不使用dateext，轮询出的日志文件不会使用日期作为后缀，而会使用数字，star count 可以设置这个数字的开始至，如：start 9，那么就会以9开始，如log_file.9<br>rotate count：轮询文件的个数，当个数满了之后，会删除最老的<br>size size：只有当原日志文件的大小达到指定的size时，才做轮询，单位自定义<br>postrotate&#x2F;endscript：在日志被轮转后执行<br>prerotate&#x2F;endscript：在日志被轮转前并且有需要轮转才执行<br>sharedscripts：当匹配文件夹里时，时间久后，会有很多以原文件加日期命名的轮询日志，而我只需要最匹配最原始的文件做轮询，这个选项就是为了做这个设置；如果没有的话，被轮询出来的日志再下一次轮询时也会被匹配到也做轮询  </p>
<h3 id="常用实例"><a href="#常用实例" class="headerlink" title="常用实例"></a>常用实例</h3><ul>
<li>tomcat日志切割<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/logrotate.d/tomcat</span><br></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">/usr/apache-tomcat-<span class="number">8.5</span>.<span class="number">35</span>/logs/catalina.out &#123;</span><br><span class="line">copytruncate</span><br><span class="line">daily</span><br><span class="line">rotate <span class="number">10</span></span><br><span class="line">missingok</span><br><span class="line">dateext</span><br><span class="line">compress</span><br><span class="line">notifempty</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>nginx访问日志每天做日志分割<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/logrotate.d/nginx</span><br></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/nginx/*<span class="built_in">log</span> &#123;</span><br><span class="line">    create <span class="number">0644</span> nginx nginx</span><br><span class="line">    daily</span><br><span class="line">    rotate <span class="number">10</span></span><br><span class="line">    missingok</span><br><span class="line">    notifempty</span><br><span class="line">    compress</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">        /bin/kill -USR1 `<span class="keyword">cat</span> /usr/local/nginx/logs/nginx.pid <span class="number">2</span>&gt;/dev/null` <span class="number">2</span>&gt;/dev/null || true</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 参考：<br><a href="https://www.cnblogs.com/lemon-le/p/8476648.html">https://www.cnblogs.com/lemon-le/p/8476648.html</a><br><a href="https://linux.cn/article-4126-1.html">https://linux.cn/article-4126-1.html</a></p>
</blockquote>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>logrotate</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat日志切割方案</title>
    <url>/2021/01/28/Tomcat-Log-cutting-scheme/</url>
    <content><![CDATA[<p>tomcat启动后，在logs文件夹下会有两个catalina 日志文件： catalina.out   catalina.2021-01-01.log  这样两个文件，日志会写2倍！</p>
<p>之前用logrotate 切 catalina.out 日志，所以想把catalina.日期.log 去掉，怎么去掉呢？</p>
<h3 id="关掉catalina-日期-log"><a href="#关掉catalina-日期-log" class="headerlink" title="关掉catalina.日期.log"></a>关掉catalina.日期.log</h3><p>如果想取消文件中的日期，则修改..&#x2F;conf&#x2F;logging.properties中的内容，添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1catalina.org.apache.juli.AsyncFileHandler.rotatable = false</span></span><br><span class="line"><span class="comment">#2localhost.org.apache.juli.AsyncFileHandler.rotatable = false</span></span><br><span class="line"><span class="comment">#3manager.org.apache.juli.AsyncFileHandler.rotatable = false</span></span><br><span class="line"><span class="comment">#4host-manager.org.apache.juli.AsyncFileHandler.rotatable = false</span></span><br></pre></td></tr></table></figure>

<p>如果想关闭manager.log,host-manager.log,localhost.log,catalina.log,只保留catalina.out,localhost_access_log.2020-08-21.txt,则需要注释handlers &#x3D; 1catalina.org.apache.juli.AsyncFileHandler……</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># handlers =1catalina.org.apache.juli.AsyncFileHandler,2localhost.org.apache.juli.AsyncFileHandler, 3manager.org.apache.juli.AsyncFileHandler, 4host-manager.org.apache.juli.AsyncFileHandler, java.util.logging.ConsoleHandler</span></span><br></pre></td></tr></table></figure>

<h3 id="关掉catalina-out"><a href="#关掉catalina-out" class="headerlink" title="关掉catalina.out"></a>关掉catalina.out</h3><p>修改tomcat&#x2F;conf&#x2F;logging.properties</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#日志目录默认是：#$&#123;catalina.base&#125;/logs</span></span><br><span class="line"></span><br><span class="line">java.util.logging.ConsoleHandler.level = OFF <span class="comment">#关掉</span></span><br><span class="line">java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter</span><br></pre></td></tr></table></figure>
<p>重启之后生效</p>
<p>版本：Centos7,Tomcat8</p>
<h3 id="logrotate日志切割"><a href="#logrotate日志切割" class="headerlink" title="logrotate日志切割"></a>logrotate日志切割</h3><p>More info: <a href="https://www.yanjr.cn/2019/02/11/Liunx-Log-cutting-tool-logrotate/">Liunx下的日志切割工具-logrotate</a></p>
<hr>
<blockquote>
<p> 参考：<br><a href="https://www.guojingyi.cn/1406.html">https://www.guojingyi.cn/1406.html</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx支持WebSocket</title>
    <url>/2019/08/06/Nginx%E9%8F%80%EE%88%9B%E5%AF%94WebSocket/</url>
    <content><![CDATA[<p>参考：<a href="https://www.cnblogs.com/kevingrace/p/9512287.html">散尽浮华</a></p>
<h3 id="错误：Unexpected-response-code-400"><a href="#错误：Unexpected-response-code-400" class="headerlink" title="错误：Unexpected response code: 400"></a>错误：<font color=red>Unexpected response code: 400</font></h3><p>WebSocket是目前比较成熟的技术了，WebSocket协议为创建客户端和服务器端需要实时双向通讯的webapp提供了一个选择。其为HTML5的一部分，WebSocket相较于原来开发这类app的方法来说，其能使开发更加地简单。大部分现在的浏览器都支持WebSocket，比如Firefox，IE，Chrome，Safari，Opera，并且越来越多的服务器框架现在也同样支持WebSocket。</p>
<p>在实际的生产环境中，要求多个WebSocket服务器必须具有高性能和高可用，那么WebSocket协议就需要一个负载均衡层，NGINX从1.3版本开始支持WebSocket，其可以作为一个反向代理和为WebSocket程序做负载均衡。</p>
<p>WebSocket协议与HTTP协议不同，但WebSocket握手与HTTP兼容，使用HTTP升级工具将连接从HTTP升级到WebSocket。这允许WebSocket应用程序更容易地适应现有的基础架构。例如，WebSocket应用程序可以使用标准HTTP端口80和443，从而允许使用现有的防火墙规则。</p>
<p>WebSocket应用程序可以在客户端和服务器之间保持长时间运行的连接，从而有助于开发实时应用程序。用于将连接从HTTP升级到WebSocket的HTTP升级机制使用Upgrade和Connection头。反向代理服务器在支持WebSocket时面临一些挑战。一个是WebSocket是一个逐跳协议，因此当代理服务器拦截客户端的升级请求时，需要向后端服务器发送自己的升级请求，包括相应的头文件。此外，由于WebSocket连接长期存在，与HTTP使用的典型短期连接相反，反向代理需要允许这些连接保持打开状态，而不是关闭它们，因为它们似乎处于空闲状态。</p>
<p>允许在客户机和后端服务器之间建立隧道，NGINX支持WebSocket。对于NGINX将升级请求从客户端发送到后台服务器，必须明确设置Upgrade和Connection标题。</p>
<h2 id="Nginx开启websocket代理功能的配置如下："><a href="#Nginx开启websocket代理功能的配置如下：" class="headerlink" title="Nginx开启websocket代理功能的配置如下："></a>Nginx开启websocket代理功能的配置如下：</h2><p>1）编辑nginx.conf，在http区域内一定要添加下面配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &#x27;&#x27; close;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>map指令的作用：<br>该作用主要是根据客户端请求中$http_upgrade 的值，来构造改变$connection_upgrade的值，即根据变量$http_upgrade的值创建新的变量$connection_upgrade，<br>创建的规则就是{}里面的东西。其中的规则没有做匹配，因此使用默认的，即 $connection_upgrade 的值会一直是 upgrade。然后如果 $http_upgrade为空字符串的话，<br>那值会是 close。</p>
<p>2）编辑vhosts下虚拟主机的配置文件，在location匹配配置中添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">proxy_set_header Connection &quot;Upgrade&quot;;</span><br></pre></td></tr></table></figure>

<p>示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">           proxy_pass http://127.0.0.1:8080;</span><br><span class="line">           proxy_set_header Host $host:$server_port;  # </span><br><span class="line">           proxy_http_version 1.1;						# 表明使用http版本为1.1,支持websocket</span><br><span class="line">           proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">           proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>UFW firewall simple setup</title>
    <url>/2019/02/03/UFW-firewall-simple-setup/</url>
    <content><![CDATA[<p>ufw是一个主机端的iptables类防火墙配置工具，比较容易上手。一般桌面应用使用ufw已经可以满足要求了。</p>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install ufw</span><br></pre></td></tr></table></figure>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>1 启用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line">sudo ufw default deny </span><br></pre></td></tr></table></figure>
<p>作用：开启了防火墙并随系统启动同时关闭所有外部对本机的访问（本机访问外部正常）。</p>
<p>2 关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span> </span><br></pre></td></tr></table></figure>
<p>2 查看防火墙状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>
<p>3 开启&#x2F;禁用相应端口或服务举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 80</span><br></pre></td></tr></table></figure>
<p>允许外部访问80端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw delete allow 80</span><br></pre></td></tr></table></figure>
<p>禁止外部访问80 端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow from 192.168.1.1</span><br></pre></td></tr></table></figure>
<p>允许此IP访问所有的本机端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw deny smtp</span><br></pre></td></tr></table></figure>
<p>禁止外部访问smtp服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw delete allow smtp</span><br></pre></td></tr></table></figure>
<p>删除上面建立的某条规则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw deny proto tcp from 10.0.0.0/8 to 192.168.0.1 port 22</span><br></pre></td></tr></table></figure>
<p>  要拒绝所有的TCP流量从10.0.0.0&#x2F;8 到192.168.0.1地址的22端口<br> 可以允许所有RFC1918网络（局域网&#x2F;无线局域网的）访问这个主机（&#x2F;8,&#x2F;16,&#x2F;12是一种网络分级）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow from 10.0.0.0/8</span><br><span class="line">sudo ufw allow from 172.16.0.0/12</span><br><span class="line">sudo ufw allow from 192.168.0.0/16</span><br></pre></td></tr></table></figure>
<h3 id="推荐设置"><a href="#推荐设置" class="headerlink" title="推荐设置"></a>推荐设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line">sudo ufw default deny </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这样设置已经很安全，如果有特殊需要，可以使用sudo ufw allow开启相应服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 80/tcp</span><br><span class="line">ufw delete allow 80/tcp</span><br></pre></td></tr></table></figure>
<h3 id="详细使用说明"><a href="#详细使用说明" class="headerlink" title="详细使用说明"></a>详细使用说明</h3><p>More info: <a href="http://wiki.ubuntu.org.cn/Ufw%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">Ufw中文使用指南</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ufw</tag>
        <tag>防火墙</tag>
        <tag>firewall</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux创建用户</title>
    <url>/2020/06/18/how-to-create-linux-user/</url>
    <content><![CDATA[<h2 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># adduser linuxidc</span></span><br></pre></td></tr></table></figure>
<p>为这个用户初始化密码，linux会判断密码复杂度，不过可以强行忽略：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># passwd linuxidc</span></span><br></pre></td></tr></table></figure>
<h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/sudoers</span></span><br></pre></td></tr></table></figure>
<p>root    ALL&#x3D;(ALL)       ALL<br>linuxidc  ALL&#x3D;(ALL)       ALL  #这个是新增的用户</p>
<p>第一次使用会提示你，你已经化身超人，身负责任。而且需要输入密码才可以下一步。如果不想需要输入密码怎么办，将最后一个ALL修改成NOPASSWD: ALL。</p>
]]></content>
      <categories>
        <category>contos7</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>contos7</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/08/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Contos7下安装mysql5.7</title>
    <url>/2020/06/18/how-to-install-mysql57-under-contos7/</url>
    <content><![CDATA[<h2 id="下载并安装MySQL官方的-Yum-Repository"><a href="#下载并安装MySQL官方的-Yum-Repository" class="headerlink" title="下载并安装MySQL官方的 Yum Repository"></a>下载并安装MySQL官方的 Yum Repository</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure>
<p>  使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure>
<p>  之后就开始安装MySQL服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install mysql-community-server</span></span><br></pre></td></tr></table></figure>
<p>  这步可能会花些时间，安装完成后就会覆盖掉之前的mariadb。</p>
<p>至此MySQL就安装完成了，然后是对MySQL的一些设置。</p>
<h2 id="MySQL数据库设置"><a href="#MySQL数据库设置" class="headerlink" title="MySQL数据库设置"></a>MySQL数据库设置</h2><p>  首先启动MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start  mysqld.service</span></span><br></pre></td></tr></table></figure>
<p>  查看MySQL运行状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl status mysqld.service</span></span><br></pre></td></tr></table></figure>
<p>此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br></pre></td></tr></table></figure>



<p>如下命令进入数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -uroot -p</span></span><br></pre></td></tr></table></figure>
<p>  输入初始密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;new password&#x27;</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<h2 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h2><p>默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须添加一个允许远程连接的帐户。或者修改 root 为允许远程连接（不推荐）</p>
<p>添加一个允许远程连接的帐户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;zhangsan&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Zhangsan2018!&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<p>修改 root 为允许远程连接（不推荐）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; UPDATE user SET Host=<span class="string">&#x27;%&#x27;</span> WHERE User=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>
<h2 id="设置默认编码为-utf8"><a href="#设置默认编码为-utf8" class="headerlink" title="设置默认编码为 utf8"></a>设置默认编码为 utf8</h2><p>mysql 安装后默认不支持中文，需要修改编码。<br>修改 &#x2F;etc&#x2F;my.cnf 配置文件，在相关节点（没有则自行添加）下添加编码配置，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>
<p>重启mysql服务，查询编码。可以看到已经改过来了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; systemctl restart mysqld</span><br><span class="line">shell&gt; mysql -uroot -p</span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;character%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="默认配置文件路径："><a href="#默认配置文件路径：" class="headerlink" title="默认配置文件路径："></a>默认配置文件路径：</h2><p>配置文件：&#x2F;etc&#x2F;my.cnf<br>日志文件：&#x2F;var&#x2F;log&#x2F;mysqld.log<br>服务启动脚本：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service<br>socket文件：&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</p>
]]></content>
      <categories>
        <category>contos7</category>
      </categories>
      <tags>
        <tag>contos7</tag>
      </tags>
  </entry>
  <entry>
    <title>查看Linux系统版本的命令</title>
    <url>/2020/06/18/how-to-view-the-linux-version/</url>
    <content><![CDATA[<p>查看Linux系统版本的命令</p>
<h2 id="1、lsb-release-a"><a href="#1、lsb-release-a" class="headerlink" title="1、lsb_release -a"></a>1、lsb_release -a</h2><p>即可列出所有版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@iZqz9adg00a6qor8gjner0Z ~]$ lsb_release -a</span><br><span class="line">LSB Version:	:core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID:	CentOS</span><br><span class="line">Description:	CentOS Linux release 7.8.2003 (Core)</span><br><span class="line">Release:	7.8.2003</span><br><span class="line">Codename:	Core</span><br></pre></td></tr></table></figure>

<p>这个命令适用于所有的Linux发行版，包括RedHat、SUSE、Debian…等发行版。</p>
<h2 id="2、cat-x2F-etc-x2F-redhat-release"><a href="#2、cat-x2F-etc-x2F-redhat-release" class="headerlink" title="2、cat &#x2F;etc&#x2F;redhat-release"></a>2、cat &#x2F;etc&#x2F;redhat-release</h2><p>这种方法只适合Redhat系的Linux：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@iZqz9adg00a6qor8gjner0Z ~]$ <span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.8.2003 (Core)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>contos7</category>
      </categories>
      <tags>
        <tag>contos7</tag>
        <tag>version</tag>
      </tags>
  </entry>
  <entry>
    <title>Contos7下安装nginx</title>
    <url>/2020/06/18/how-to-install-nginx-under-contos7/</url>
    <content><![CDATA[<h2 id="配置-EPEL源"><a href="#配置-EPEL源" class="headerlink" title="配置 EPEL源"></a>配置 EPEL源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sudo yum install -y epel-release</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sudo yum -y update</span></span><br></pre></td></tr></table></figure>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sudo yum install -y nginx</span></span><br></pre></td></tr></table></figure>
<p>安装成功后，默认的网站目录为： &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>
<p>默认的配置文件为：&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p>
<p>自定义配置文件目录为: &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</p>
<h2 id="开启端口80和443"><a href="#开启端口80和443" class="headerlink" title="开启端口80和443"></a>开启端口80和443</h2><p>如果你的服务器打开了防火墙，你需要运行下面的命令，打开80和443端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sudo firewall-cmd --permanent --zone=public --add-service=http</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sudo firewall-cmd --permanent --zone=public --add-service=https</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sudo firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>
<p>如果你的服务器是阿里云ECS，你还可以通过控制台安全组，打开80和443端口，或者其他自定义端口。</p>
<h2 id="操作Nginx"><a href="#操作Nginx" class="headerlink" title="操作Nginx"></a>操作Nginx</h2><p>1.启动 Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start nginx</span></span><br></pre></td></tr></table></figure>
<p>2.停止Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl stop nginx</span></span><br></pre></td></tr></table></figure>
<p>3.重启Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure>
<p>4.查看Nginx状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl status nginx</span></span><br></pre></td></tr></table></figure>
<p>5.启用开机启动Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl enable nginx</span></span><br></pre></td></tr></table></figure>
<p>6.禁用开机启动Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl disable nginx</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>contos7</category>
      </categories>
      <tags>
        <tag>contos7</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>pm2小记</title>
    <url>/2020/11/26/pm2%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="pm2小记"><a href="#pm2小记" class="headerlink" title="pm2小记"></a>pm2小记</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm2 start xxx       #启动服务器</span><br><span class="line">pm2 list            #查看运行状态</span><br><span class="line">pm2 logs            #查看日志</span><br><span class="line">pm2 restart xxx     #重启应用</span><br><span class="line">pm2 stop xxx        #停止应用</span><br></pre></td></tr></table></figure>

<hr>
<p>监听修改，并自动重启：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm2 start xxx --watch <span class="comment">//重启的是服务端代码，浏览器需刷新</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>pm2</tag>
      </tags>
  </entry>
</search>
